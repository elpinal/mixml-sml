{DeclU : [forall (!2610@Expr.exp : Type). exist (!2611 : Type). {Decl : {dec : [= !2611], dec_in : [[Val : int * !2610] -> !2611]+, dec_out : [!2611 -> [Val : int * !2610]]+, make_val : [int -> !2610 -> !2611]+, u : [= [Val : int * !2610]]}, Expr : {exp : [= !2610]}}]+, ExpDec : [forall (!2612@Expr.exp : Type), (!2613@Decl.dec : Type). {Decl : {dec : [= !2613], make_val : [int -> !2612 -> !2613]-}, Expr : {exp : [= !2612]}}]+, ExprU : [forall (!2614@Decl.dec : Type). exist (!2615 : Type). {Decl : {dec : [= !2614], make_val : [int -> !2615 -> !2614]-}, Expr : {exp : [= !2615], exp_in : [[Let : !2614 * !2615] -> !2615]+, exp_out : [!2615 -> [Let : !2614 * !2615]]+, make_let : [!2614 -> !2615 -> !2615]+, make_let_val : [int -> !2615 -> !2615 -> !2615]+, u : [= [Let : !2614 * !2615]]}}]+, M : {Decl : {dec : [= !1], dec_in : [[Val : int * !0] -> !1]+, dec_out : [!1 -> [Val : int * !0]]+, make_val : [int -> !0 -> !1]+, u : [= [Val : int * !0]]}, Expr : {exp : [= !0], exp_in : [[Let : !1 * !0] -> !0]+, exp_out : [!0 -> [Let : !1 * !0]]+, make_let : [!1 -> !0 -> !0]+, make_let_val : [int -> !0 -> !0 -> !0]+, u : [= [Let : !1 * !0]]}}}
