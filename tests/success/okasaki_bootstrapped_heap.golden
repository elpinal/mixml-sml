{Bootstrap : [forall (!9051@Arg.t : Type). exist (!9052 : Type). {Arg : {leq : [!9051 -> !9051 -> bool]-, t : [= !9051]}, Elem : {leq : [!9051 -> !9051 -> bool]+, t : [= !9051]}, MkHeap : [forall (!9053@Elem.t : Type). exist (!9054 : Type). {Elem : {leq : [!9053 -> !9053 -> bool]-, t : [= !9053]}, empty : [!9054]+, findMin : [!9054 -> [None : unit, Some : !9053]]+, insert : [!9053 -> !9054 -> !9054]+, merge : [!9054 -> !9054 -> !9054]+, t : [= !9054]}]-, empty : [!9052]+, findMin : [!9052 -> [None : unit, Some : !9051]]+, insert : [!9051 -> !9052 -> !9052]+, merge : [!9052 -> !9052 -> !9052]+, t : [= !9052]}]+, HEAP : [forall (!9055@t : Type), (!9056@Elem.t : Type). {Elem : {leq : [!9056 -> !9056 -> bool]-, t : [= !9056]}, empty : [!9055]-, findMin : [!9055 -> [None : unit, Some : !9056]]-, insert : [!9056 -> !9055 -> !9055]-, merge : [!9055 -> !9055 -> !9055]-, t : [= !9055]}]+, ORDERED : [forall (!9057@t : Type). {leq : [!9057 -> !9057 -> bool]-, t : [= !9057]}]+}
