sml
name MakeParser

terminal LOWER_IDENT of string
terminal UPPER_IDENT of string
terminal QUOTE_IDENT of string
terminal NUMBER of int

terminal CAP_TYPE
terminal FUN
terminal IN
terminal LET
terminal SEALS
terminal LINK
terminal WITH
terminal VAL
terminal TYPE
terminal UNIT
terminal MODULE
terminal NEW
terminal EXT
terminal BOOL
terminal INT
terminal TRUE
terminal FALSE

terminal LPAREN
terminal RPAREN
terminal LBRACK
terminal RBRACK
terminal LBRACE
terminal RBRACE

terminal COLON
terminal RARROW precr 20
terminal STAR precr 30
terminal EQUAL
terminal DOT
terminal COMMA
terminal MINUS
terminal PLUS
terminal UNDERSCORE

nonterminal Module : module =
  1:ModuleProj     => module_id
  NEW 1:ModuleProj => mnew
  LINK 1:ModVar EQUAL 2:Module WITH 3:Module => mlink
  LINK 1:ModVar EQUAL 2:Module SEALS 3:Module => mseal
  LINK 1:Module WITH 2:Module => mlink_novar
  LINK 1:Module SEALS 2:Module => mseal_novar

nonterminal ModuleProj : module =
  1:ModuleAtom         => module_id
  1:ModuleProj DOT 2:Label => mproj

nonterminal ModuleAtom : module =
  LPAREN 1:Module RPAREN => module_id
  1:ModVar      => mvar
  LBRACE RBRACE => empty_module
  LBRACK VAL 1:Exp RBRACK => exp_export
  LBRACK VAL COLON 1:Type RBRACK => exp_import
  LBRACK TYPE 1:Type RBRACK => type_export
  LBRACK TYPE COLON 1:Kind RBRACK => type_import
  LBRACK UNIT 1:Module RBRACK => unit_export
  LBRACE 1:Dec RBRACE         => module_id

nonterminal Dec : module =
  MODULE 1:Label EQUAL 2:Module => minj
  TYPE 1:Label EQUAL 2:Type => mtype_binding
  TYPE 1:Label COLON 2:Kind => mtype_spec
  VAL 1:Label EQUAL 2:Exp => mval_binding
  VAL 1:Label COLON 2:Type => mval_spec

nonterminal ModVar : modvar =
  1:UPPER_IDENT => mvar_upper
  1:LOWER_IDENT => mvar_lower

nonterminal Label : label =
  1:UPPER_IDENT => label_upper
  1:LOWER_IDENT => label_lower

nonterminal Exp : exp =
  1:ExpApp                   => exp_id
  FUN 1:Params1 RARROW 2:Exp => eabs
  1:Con 2:ExpAtom COLON 3:Type => econ

nonterminal ExpApp : exp =
  1:ExpAtom    => exp_id
  EXT 1:ModuleProj => emodule
  1:ExpApp 2:ExpAtom => eapp

nonterminal ExpAtom : exp =
  LPAREN 1:Exp RPAREN => exp_id
  TRUE         => etrue
  FALSE        => efalse
  1:NUMBER     => eint
  1:LOWER_IDENT => evar

nonterminal Params1 : params =
  1:Param => params1
  1:Param 2:Params1 => params_cons

nonterminal Param : param =
  LPAREN 1:Pat COLON 2:Type RPAREN => param1

nonterminal Pat : pattern =
  1:LOWER_IDENT => pvar
  UNDERSCORE    => pwildcard

nonterminal Type : ty =
  1:TypeApp   => type_id
  FUN LPAREN 1:TVar COLON 2:Kind RPAREN RARROW 3:Type => tabs
  1:Type RARROW 2:Type => tarrow

nonterminal TypeApp : ty =
  1:TypeAtom   => type_id
  EXT 1:ModuleProj => tmodule
  1:TypeApp 2:TypeAtom => tapp

nonterminal TypeAtom : ty =
  LPAREN 1:Type RPAREN => type_id
  1:TVar       => tvar
  BOOL         => tbool
  INT          => tint
  LBRACK 1:Sum RBRACK => tsum

nonterminal TVar : type_var =
  1:QUOTE_IDENT => quote_tvar

nonterminal Sum : sum =
  1:Con COLON 2:Type => sum1
  1:Con COLON 2:Type COMMA 3:Sum => sum_cons

nonterminal Con : con =
  1:UPPER_IDENT => con_upper

nonterminal Kind : kind =
  CAP_TYPE => kbase
  1:Kind RARROW 2:Kind => karrow

start Module
